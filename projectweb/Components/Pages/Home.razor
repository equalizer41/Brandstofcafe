@page "/"
@inject TafelRepository TafelRepo
@inject BestellingRepository BestellingRepo
@inject IJSRuntime JS

@using projectweb.Components.Tafels
@using projectweb.Components.Bestellen

@using projectweb.Repositories

@rendermode InteractiveServer

<h2>Bestelpagina voor Obers</h2>

 <ProductLijst />


<!-- Sectieoverzicht -->
<div class="card mb-3">
    <div class="card-header collapse-toggle collapsed"
         data-bs-toggle="collapse"
         data-bs-target="#sectieCollapse"
         aria-expanded="true"
         style="cursor: pointer;">
        <span class="fw-semibold">Kies een Sectie van het restaurant</span>
        <i class="bi bi-chevron-down ms-auto"></i>
    </div>

    <div id="sectieCollapse" class="collapse show card-body">
        <TafelSectieLijst SectieId="@GeselecteerdeSectieId"
                             OnSectieSelected="HandleSectieSelected" />
    </div>
</div>


<!-- Tafeloverzicht -->
@if (GeselecteerdeSectieId != 0)
{
    <div class="card mb-3">
        <div class="card-header collapse-toggle collapsed"
             data-bs-toggle="collapse"
             data-bs-target="#tafelCollapse"
             aria-expanded="true"
             style="cursor: pointer;">
            <span class="fw-semibold">Selecteer een tafel</span>
            <i class="bi bi-chevron-down ms-auto"></i>
        </div>

        <div id="tafelCollapse" class="collapse show card-body">
            <TafelOverzicht Tafels="@Tafels"
                            GeselecteerdeTafelId="@GeselecteerdeTafelId"
                            OnToggleTafel="ToggleTafel"
                            StartNieuweBestelling="StartNieuweBestelling" />
        </div>
    </div>
}


<!-- Bestellingoverzicht -->
@if (GeselecteerdeTafelId is not null && GeselecteerdeSectieId != 0)
{
    <div class="card mb-3">
        <div class="card-header d-flex align-items-center gap-3">
            <h5 class="mb-0">Bestelling voor tafel @GeselecteerdeTafelId</h5>
            <button class="btn btn-success btn-sm"
                    @onclick="() => StartNieuweBestelling(GeselecteerdeTafelId.Value)">
                ➕ Start nieuwe bestelling
            </button>
        </div>
        <div class="card-body">
            <BestellingOverzicht TafelId="@GeselecteerdeTafelId.Value" />
        </div>
    </div>
}

<!-- Modal -->
<div class="modal fade" tabindex="-1" id="bevestigingModal" role="dialog">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Nieuwe bestelling starten?</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Sluiten"></button>
            </div>
            <div class="modal-body">
                <p>Er zijn nog onbetaalde bestellingen voor deze tafel. Weet je zeker dat je een nieuwe wilt starten?</p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="AnnuleerNieuweBestelling" data-bs-dismiss="modal">Annuleren</button>
                <button class="btn btn-primary" @onclick="BevestigNieuweBestelling" data-bs-dismiss="modal">Ja, start</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Tafel> Tafels = new();
    private int? GeselecteerdeTafelId = null;


    private int GeselecteerdeTafelIdVoorNieuweBestelling;
    private int GeselecteerdeSectieId;

    protected override void OnInitialized()
    {
        Tafels = new();
    }

    private void ToggleTafel(int tafelId)
    {
        if (GeselecteerdeTafelId == tafelId)
        {
            GeselecteerdeTafelId = null; // Sluit huidige
        }
        else
        {
            GeselecteerdeTafelId = tafelId; // Open nieuwe
        }
        JS.InvokeVoidAsync("bootstrapCollapseHelper.toggle", "#TafelCollapse");


        StateHasChanged();
    }


    private async Task StartNieuweBestelling(int tafelId)
    {
        var bestellingen = BestellingRepo.GetOnbetaaldeBestellingenVoorTafel(tafelId);
        bool heeftOnbetaalde = bestellingen.Any();

        if (heeftOnbetaalde)
        {
            GeselecteerdeTafelIdVoorNieuweBestelling = tafelId;
            await JS.InvokeVoidAsync("bootstrapModalHelper.show", "#bevestigingModal");
            return;
        }

        await MaakNieuweBestelling(tafelId);
    }

    private async Task MaakNieuweBestelling(int tafelId)
    {
        var bestelling = new Bestelling
        {
            TafelId = tafelId,
            Tijdstip = DateTime.Now
        };

        await BestellingRepo.CreateAsync(bestelling);
        StateHasChanged();
    }

    private async Task BevestigNieuweBestelling()
    {
        await MaakNieuweBestelling(GeselecteerdeTafelIdVoorNieuweBestelling);
    }

    private void AnnuleerNieuweBestelling()
    {
        GeselecteerdeTafelIdVoorNieuweBestelling = 0;
    }

    private async Task HandleSectieSelected(int sectieId)
    {
        if (GeselecteerdeSectieId == sectieId)
        {
            GeselecteerdeSectieId = 0;
            Tafels = new();
        }
        else
        {
            GeselecteerdeSectieId = sectieId;
            Tafels = TafelRepo.GetAll()
                              .Where(t => t.SectieId == sectieId)
                              .ToList();
        }
        await JS.InvokeVoidAsync("bootstrapCollapseHelper.toggle", "#sectieCollapse");

        StateHasChanged();
    }


}
