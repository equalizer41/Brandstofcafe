@page "/"
@inject TafelRepository TafelRepo
@inject BestellingRepository BestellingRepo
@inject IJSRuntime JS

@using projectweb.Components.Flow
@using projectweb.Repositories
@rendermode InteractiveServer

<h2>Bestelpagina voor Obers</h2>

<!-- Sectieoverzicht -->

<div class="card mb-3">
    <div class="card-header d-flex align-items-center">
        <span class="fw-semibold">Kies een Sectie van het restaurant</span>
        <button class="btn btn-sm btn-outline-secondary ms-auto" data-bs-toggle="collapse" data-bs-target="#sectieCollapse">
            Sectie wisselen
        </button>
    </div>

    <div id="sectieCollapse" class="collapse show card-body">
        <TafelSectieLijst SectieId="@GeselecteerdeSectieId"
                             OnSectieSelected="HandleSectieSelected" />
    </div>
</div>

<!-- Tafeloverzicht -->
@if (GeselecteerdeSectieId != 0)
{
    <div class="card mb-3">
        <div class="card-header d-flex align-items-center">
            <span class="fw-semibold">Selecteer een tafel</span>
            <button class="btn btn-sm btn-outline-secondary ms-auto" data-bs-toggle="collapse" data-bs-target="#tafelCollapse">
                Tafels tonen/verbergen
            </button>
        </div>

        <div id="tafelCollapse" class="collapse show card-body">
            <TafelLijst Tafels="@Tafels"
                            GeselecteerdeTafelId="@GeselecteerdeTafelId"
                            OnToggleTafel="ToggleTafel"                        
                            StartNieuweBestelling="StartNieuweBestelling" />

        </div>
    </div>
}

@if (GeselecteerdeTafelId is not null && GeselecteerdeSectieId != 0)
{
    <div class="card mb-3">
        <div class="card-header d-flex align-items-center gap-3">
            <h5 class="mb-0">Bestelling voor tafel @GeselecteerdeTafelId</h5>
            <button class="btn btn-success btn-sm"
                    @onclick="() => StartNieuweBestelling(GeselecteerdeTafelId.Value)">
                ➕ Start nieuwe bestelling
            </button>
        </div>
        <div class="card-body">
            <TafelBestellingOverzicht TafelId="@GeselecteerdeTafelId.Value" />
        </div>
    </div>
}


@code {
    private List<Tafel> Tafels = new();
    private int? GeselecteerdeTafelId = null;


    private int GeselecteerdeTafelIdVoorNieuweBestelling;
    private int GeselecteerdeSectieId;

    protected override void OnInitialized()
    {
        Tafels = new();
    }

    private void ToggleTafel(int tafelId)
    {
        if (GeselecteerdeTafelId == tafelId)
        {
            GeselecteerdeTafelId = null; // Sluit huidige
        }
        else
        {
            GeselecteerdeTafelId = tafelId; // Open nieuwe
        }

        StateHasChanged();
    }


    private async Task StartNieuweBestelling(int tafelId)
    {
        var bestellingen = BestellingRepo.GetOnbetaaldeBestellingenVoorTafel(tafelId);
        bool heeftOnbetaalde = bestellingen.Any();

        if (heeftOnbetaalde)
        {
            GeselecteerdeTafelIdVoorNieuweBestelling = tafelId;
            await JS.InvokeVoidAsync("bootstrapModalHelper.show", "#bevestigingModal");
            return;
        }

        await MaakNieuweBestelling(tafelId);
    }

    private async Task MaakNieuweBestelling(int tafelId)
    {
        var bestelling = new Bestelling
        {
            TafelId = tafelId,
            Tijdstip = DateTime.Now
        };

        await BestellingRepo.CreateAsync(bestelling);
        StateHasChanged();
    }
    private async Task HandleSectieSelected(int sectieId)
    {
        if (GeselecteerdeSectieId == sectieId)
        {
            GeselecteerdeSectieId = 0;
            Tafels = new();
        }
        else
        {
            GeselecteerdeSectieId = sectieId;
            Tafels = TafelRepo.GetAll()
                              .Where(t => t.SectieId == sectieId)
                              .ToList();
        }
        StateHasChanged();
    }


}
