@using projectweb.Repositories
@inject SectieRepository SectieRepo
@inject BestellingStateService BestelState
@implements IDisposable

<h3>Kies een Sectie van het restaurant</h3>

<!-- Toont alle kiesbare secties-->
<div class="row row-cols-1 row-cols-md-3 g-4 mb-4">
@foreach(var s in Secties)
{
     <div class="col">
                <div class="card h-100">
                    <div class="card-body">
                        <h5 class="card-title">@s.Naam </h5>
                <button class="btn btn-primary" @onclick="() => SelecteerSectie(s.Id)">
                        @(BestelState.GeselecteerdeSectie?.Id == s.Id ? "Sluit overzicht" : "Toon overzicht")
                </button>
                    </div>
                </div>
    </div>
}
</div>

@code {
    [Parameter] public EventCallback<int> TafelSectieIsGeselecteerd { get; set; }
    // Maakt een nieuwe lijst om de Secties in op te slaan
    private List<Sectie> Secties = new();

    // Haalt alle Secties op uit de SectieTabel via de Repository
    protected override void OnParametersSet()
    {
        Secties = SectieRepo.GetAll();
    }

    // Selecteer de eerste waarde uit de lijst Secties en zet deze door naar de BestelState voor het bijhouden van de sectiekeuze -> Daarna kan TafelLijst worden geladen
    private async Task SelecteerSectie(int id)
    {
        var sectie = Secties.FirstOrDefault(s => s.Id == id);
        Console.WriteLine($"[DEBUG] id heeft waarde: {id}");

        if (sectie == null)
            return;

        // Toggle : deselecteer het component als hij al actief is
        if (BestelState.GeselecteerdeSectie?.Id == sectie.Id)
        {
            BestelState.SelecteerSectie(null); // maakt de selectie leeg
        }
        else
        {
            BestelState.SelecteerSectie(sectie);
        }
        Console.WriteLine($"[DEBUG] TafelSectieLijst - GeselecteerdeSectieid heeft waarde: {BestelState.GeselecteerdeSectie?.Id}");
        await TafelSectieIsGeselecteerd.InvokeAsync(id);

        StateHasChanged();
    }
    // Hiermee worden wijzigingen in de bestelstate doorgegeven
    protected override void OnInitialized()
    {
        BestelState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        BestelState.OnChange -= StateHasChanged;
    }

}

