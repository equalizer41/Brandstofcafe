@page "/producten-toevoegen"
@using projectweb.Repositories
@inject ProductRepository ProductRepo
@inject BestellingRepository BestellingRepo
@inject CategorieRepository CategorieRepo
@inject BestellingStateService BestelState
@inject NavigationManager Nav

<h3 class="mb-4">Producten toevoegen aan ronde @BestelState.ActieveRonde?.RondNr</h3>

@if (OrderRegels.Any())
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Product</th>
                <th>Aantal</th>
                <th>Prijs</th>
                <th>Totaal</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var regel in OrderRegels)
            {
                var product = AlleProducten.FirstOrDefault(p => p.Id == regel.ProductId);
                <tr>
                    <td>@product?.Naam</td>
                    <td>@regel.Aantal</td>
                    <td>@product?.Prijs.ToString("C")</td>
                    <td>@(regel.Aantal* product?.Prijs ?? 0).ToString("C")</td>
                    <td>
                        <button class="btn btn-sm btn-danger" @onclick="() => VerwijderRegel(regel)">🗑</button>
                    </td>
                </tr>
                @foreach (var addon in regel.AddOns)
                {
                    <tr class="table-secondary">
                        <td class="ps-4">↳ @addon.ProductAddOn?.AddOn?.Naam</td>
                        <td>@regel.Aantal</td>
                        <td>@addon.ProductAddOn?.Prijs.ToString("C")</td>
                        <td>@(regel.Aantal* addon.ProductAddOn?.Prijs ?? 0).ToString("C")</td>
                        <td></td>
                    </tr>
                }
            }
        </tbody>
    </table>
}
else
{
    <p class="text-muted">Nog geen producten toegevoegd aan deze ronde.</p>
}

<hr />

@foreach (var categorie in AlleCategorieen.Where(c => c.OuderCategorieId != null))
{
    <div class="mb-4">
        <h5>@categorie.Naam</h5>
        <div class="row">
            @foreach (var product in AlleProducten.Where(p => p.CategorieId == categorie.Id))
            {
                <div class="col-md-4 mb-2">
                    <div class="card h-100">
                        <div class="card-body">
                            <h6 class="card-title">@product.Naam</h6>
                            <p class="card-text">€@product.Prijs</p>

                            @foreach (var pac in product.AddOnCategorieen)
                            {
                                <label class="form-label d-block">@pac.AddOnCategorie.Naam</label>
                                @foreach (var optie in pac.AddOnCategorie.Opties)
                                {
                                    <div class="form-check mb-1">
                                        <input type="checkbox"
                                               class="form-check-input"
                                               checked="@GetAddOnState(product.Id, optie.Id)"
                                               @onchange="e => SetAddOnState(product.Id, optie.Id, (bool)e.Value!)" />
                                        <label class="form-check-label">@optie.Naam</label>
                                    </div>
                                }
                            }

                            <button class="btn btn-sm btn-primary mt-2" @onclick="() => VoegProductToe(product)">
                                Toevoegen
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@if (OrderRegels.Any())
{
    <div class="mt-4">
        <button class="btn btn-success" @onclick="Afronden">Bestelling afronden</button>
    </div>
}

@code {
    private List<Product> AlleProducten = new();
    private List<Categorie> AlleCategorieen = new();
    private List<OrderRegel> OrderRegels => BestelState.OrderRegelsInOpbouw;

    // Geselecteerde add-ons per product/addon combinatie
    private Dictionary<(int productId, int addOnId), bool> GeselecteerdeAddOns = new();

    protected override void OnInitialized()
    {
        AlleProducten = ProductRepo.GetAll();
        AlleCategorieen = CategorieRepo.GetAll();
    }

    private bool GetAddOnState(int productId, int addOnId)
    {
        return GeselecteerdeAddOns.TryGetValue((productId, addOnId), out var value) && value;
    }

    private void SetAddOnState(int productId, int addOnId, bool value)
    {
        GeselecteerdeAddOns[(productId, addOnId)] = value;
    }

    private async Task VoegProductToe(Product product)
    {
        BestelState.SelecteerProduct(product);

        foreach (var ((prodId, addOnId), geselecteerd) in GeselecteerdeAddOns)
        {
            if (prodId == product.Id && geselecteerd)
            {
                var pa = product.AddOns.FirstOrDefault(p => p.AddOnId == addOnId);
                if (pa != null)
                    BestelState.SelecteerAddOn(pa);
            }
        }

        await BestelState.BevestigEnBewaarProductAsync(BestellingRepo);

        // Wis geselecteerde add-ons van dit product
        foreach (var key in GeselecteerdeAddOns.Keys.Where(k => k.productId == product.Id).ToList())
        {
            GeselecteerdeAddOns.Remove(key);
        }

        StateHasChanged();
    }

    private void VerwijderRegel(OrderRegel regel)
    {
        BestelState.OrderRegelsInOpbouw.Remove(regel);
    }

    private void Afronden()
    {
        BestelState.Reset();
        Nav.NavigateTo("/");
    }
}
