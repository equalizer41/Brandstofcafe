@inject BestellingRepository BestellingRepo
@inject BestellingStateService BestelState
@inject NavigationManager Nav
@using projectweb.Repositories

<br />
<div class="d-flex flex-row gap-2 flex-wrap">
    <button class="btn btn-primary" @onclick="NieuweBestelling" disabled="@(actieveBestelling is not null)">➕ Nieuwe bestelling</button>

    <button class="btn btn-primary" @onclick="NieuweRonde" disabled="@(actieveBestelling is null)">🌀 Nieuwe ronde</button>

    <button class="btn btn-primary" @onclick="HerhaalLaatsteRonde" disabled="@(actieveBestelling?.Rondes?.Any() != true)">🔁 Herhaal laatste ronde</button>

    <button class="btn btn-success" @onclick="NaarBetaalPagina" disabled="@(actieveBestelling is null)">💳 Afronden & betalen</button>
</div>

@code {
    private Bestelling? actieveBestelling => BestelState.ActieveBestelling;
    private Ronde? actieveRonde => BestelState.ActieveRonde;


    private void NieuweBestelling()
    {

    }
    private void NieuweRonde()
    {

    }

    private async Task HerhaalLaatsteRonde()
    {
        if (actieveBestelling?.Rondes?.Any() != true)
            return;

        var laatsteRonde = actieveBestelling.Rondes.Last();

        var nieuweRonde = await BestellingRepo.HerhaalRonde(laatsteRonde.Id);
        if (nieuweRonde is not null)
        {
            // Voeg toe aan de huidige bestelling
            actieveBestelling.Rondes.Add(nieuweRonde);

            // Zet nieuwe actieve ronde
            BestelState.StartNieuweRonde(nieuweRonde);
        }
    }


    private void NaarBetaalPagina()
    {
        if (actieveBestelling is not null)
        {
            Nav.NavigateTo($"/betalen/");
        }
    }


    // Hiermee worden wijzigingen in de bestelstate doorgegeven
    protected override void OnInitialized()
    {
        BestelState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        BestelState.OnChange -= StateHasChanged;
    }

}
