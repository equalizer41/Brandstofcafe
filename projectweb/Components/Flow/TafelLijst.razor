@using projectweb.Components.Flow
@using projectweb.Repositories
@inject BestellingStateService BestelState
@inject BestellingRepository BestellingRepo

@inject TafelRepository TafelRepo
@implements IDisposable
@inject IJSRuntime JS


<h3>Selecteer een tafel</h3>

<!-- Toont alle tafels in de tabel Tafels op basis van SectieID-->
<div class="row row-cols-1 row-cols-md-3 g-4 mb-4">
    @foreach (var t in Tafels)
    {
        <div class="col">
                <div class="card-body">
                <h5 class="card-title">Tafel @t.Naam</h5>
                <button class="btn btn-primary" @onclick="() => SelecteerTafel(t.Id)">

                    @(BestelState.GeselecteerdeTafel?.Id == t.Id ? "Sluit overzicht" : "Toon overzicht")
                </button>
                </div>
        </div>
    }
</div>


@code {
    [Parameter] public EventCallback<int> TafelIsGeselecteerd { get; set; }
    // Maakt een nieuwe lijst om Tafels in op te slaan
    private List<Tafel> Tafels { get; set; } = new();

    // Plaatst alle Tafels waarbij de sectieID gelijk is met de sectieid uit de bestelstate
    protected override void OnInitialized()
    {
        
        Tafels = TafelRepo.GetAll()
                          .Where(t => t.SectieId == BestelState.GeselecteerdeSectie?.Id)
                          .ToList();
        Console.WriteLine($"[DEBUG] Tafels geladen: {Tafels.Count}");

        // Roept HerlaadTafels aan zodat de tafels tabel weer wordt vernieuwd als een nieuwe sectie wordt gekozen
        BestelState.OnChange += HerlaadTafel;
    }

    // Herlaad alle Tafels waarbij de sectieID gelijk is met de sectieid uit de bestelstate

    private void HerlaadTafel()
    {
        Tafels = TafelRepo.GetAll()
                        .Where(t => t.SectieId == BestelState.GeselecteerdeSectie?.Id)
                        .ToList();
       
        BestelState.OnChange += StateHasChanged;

    }

    // Geeft de geselecteerde tafel door aan de bestelstate -> daarna kan tafelbesteloverzicht worden geladen
    private async Task SelecteerTafel(int id)
    {
        var tafel = Tafels.FirstOrDefault(t => t.Id == id);

        if (BestelState.GeselecteerdeTafel?.Id == tafel?.Id)
        {
            BestelState.SelecteerTafel(null);
        }
        else if (tafel is not null)
        {
            BestelState.SelecteerTafel(tafel);

            // Bestelling + ronde selecteren
            var bestellingen = BestellingRepo.OpenBestellingBijTafelID(tafel.Id);
            var laatsteBestelling = bestellingen.OrderByDescending(b => b.Id).FirstOrDefault();

            if (laatsteBestelling is not null)
            {
                var laatsteRonde = laatsteBestelling.Rondes
                    .OrderByDescending(r => r.RondNr)
                    .FirstOrDefault();

                if (laatsteRonde is not null)
                {
                    BestelState.StartNieuweBestellingMetRonde(laatsteBestelling, laatsteRonde);

                    // Open/sluit de collapse van deze bestelling
                    await JS.InvokeVoidAsync("sluitAlleCollapses");            
                }
            }
        }

        StateHasChanged();
    }
    public void Dispose()
    {
        BestelState.OnChange -= HerlaadTafel;
    }
}
