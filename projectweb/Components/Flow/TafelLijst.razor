@using projectweb.Components.Flow
@using projectweb.Repositories
@inject BestellingStateService BestelState
@inject TafelRepository TafelRepo
@implements IDisposable

<p>DEBUG: Loaded sectie ID = @BestelState.GeselecteerdeSectie?.Id</p>
<p>DEBUG: Aantal tafels = @Tafels?.Count</p>

<h3>Selecteer een tafel</h3>

<div class="row row-cols-1 row-cols-md-3 g-4 mb-4">
    @foreach (var t in Tafels)
    {
        <div class="col">
                <div class="card-body">
                <h5 class="card-title">Tafel @t.Naam (ID: @t.Id)</h5>
                <button class="btn btn-primary" @onclick="() => SelecteerTafel(t.Id)">

                    @(BestelState.GeselecteerdeTafel?.Id == t.Id ? "Sluit overzicht" : "Toon overzicht")
                </button>
                </div>
        </div>
    }
</div>


@code {
    [Parameter] public EventCallback<int> TafelIsGeselecteerd { get; set; }
    private List<Tafel> Tafels { get; set; } = new();


    protected override void OnInitialized()
    {
        Console.WriteLine("[DEBUG] TafelLijst - OnInitialized aangeroepen");
        Console.WriteLine($"[DEBUG] TafelLijst - GeselecteerdeSectieid heeft waarde: {BestelState.GeselecteerdeSectie?.Id}");
        Tafels = TafelRepo.GetAll()
                          .Where(t => t.SectieId == BestelState.GeselecteerdeSectie?.Id)
                          .ToList();
        Console.WriteLine($"[DEBUG] Tafels geladen: {Tafels.Count}");
        
        BestelState.OnChange += StateHasChanged;
    }

    private void SelecteerTafel(int id)
    {
        var tafel = Tafels.FirstOrDefault(t => t.Id == id);

        // Toggle : deselecteer als hij al actief is

        if (BestelState.GeselecteerdeTafel?.Id == tafel?.Id)
        {
            BestelState.SelecteerTafel(null); // Deselecteer 
        }
        else
        {
            BestelState.SelecteerTafel(tafel);

        }
    }

    public void Dispose()
    {
        BestelState.OnChange -= StateHasChanged;
    }
}
