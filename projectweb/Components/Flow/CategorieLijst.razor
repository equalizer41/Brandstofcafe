@inject TafelRepository TafelRepo
@inject BestellingRepository BestellingRepo
@inject IJSRuntime JS

@using projectweb.Components.Flow
@using projectweb.Repositories
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components

<div class="accordion mb-3" id="accordion-@Categorie.Id">
    <div class="accordion-item">
        <h2 class="accordion-header" id="heading-@Categorie.Id">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                    data-bs-target="#collapse-@Categorie.Id" aria-expanded="false"
                    aria-controls="collapse-@Categorie.Id">
                @Categorie.Naam
            </button>
        </h2>
        <div id="collapse-@Categorie.Id" class="accordion-collapse collapse"
             aria-labelledby="heading-@Categorie.Id" data-bs-parent="#accordion-@Categorie.Id">
            <div class="accordion-body">
                @foreach (var p in AlleProducten.Where(p => p.CategorieId == Categorie.Id))
                {
                    <div class="d-flex align-items-center justify-content-between mb-2">
                        <span>@p.Naam</span>
                        <div class="d-flex align-items-center">
                            <input type="number" min="1" class="form-control form-control-sm me-2"
                                   style="width: 70px"
                                   @bind="TijdelijkeAantallen[p.Id]" />
                            <button class="btn btn-sm btn-outline-primary" @onclick="() => Toevoegen(p)">
                                ➕ Toevoegen
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public Categorie Categorie { get; set; } = default!;
    [Parameter] public List<Product> AlleProducten { get; set; } = new();
    [Parameter] public Dictionary<int, int> TijdelijkeAantallen { get; set; } = new();
    [Parameter] public Dictionary<int, List<int>> GeselecteerdeAddOns { get; set; } = new();
    [Parameter] public EventCallback<Product> OnToevoegen { get; set; }

    private async Task Toevoegen(Product p)
    {
        await OnToevoegen.InvokeAsync(p);
    }
}
