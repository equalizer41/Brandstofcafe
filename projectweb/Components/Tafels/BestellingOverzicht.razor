@inject BestellingRepository BestellingRepo
@inject RondeRepository RondeRepo
@using projectweb.Repositories
@using projectweb.Components.Bestellen

@if (Bestellingen.Any())
{
    <div class="accordion" id="bestellingenAccordion">
        @for (int i = 0; i < Bestellingen.Count; i++)
        {
            var b = Bestellingen[i];
            var collapseId = $"collapse{i}";
            var headingId = $"heading{i}";
            <div class="accordion-item">
                <h2 class="accordion-header" id="@headingId">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#@collapseId" aria-expanded="false" aria-controls="@collapseId">
                        Bestelling @b.Id – @b.Rondes.Count rondes – @(b.IsBetaald ? "✔ Betaald" : "✖ Niet betaald")
                    </button>
                </h2>
                <div id="@collapseId" class="accordion-collapse collapse" aria-labelledby="@headingId" data-bs-parent="#bestellingenAccordion">
                    <div class="accordion-body">
                        @foreach (var r in b.Rondes)
                        {
                            <div class="mb-2">
                                Ronde @r.Id – Status: @r.Status
                            </div>
                            <div id="@collapseId" class="accordion-collapse collapse" aria-labelledby="@headingId" data-bs-parent="#bestellingenAccordion">
                                <div class="accordion-body">
                                    @foreach (var or in r.OrderRegels)
                                    {
                                        <div class="mb-2">                                                                          
                                            Productnaam: @or.ProductId
                                            <br />
                                            Aantal besteld: @or.Aantal
                                            <br />
                                            Aantal betaald: @or.AantalBetaald
                                        </div>


                                    }
                                       <BestelActies BestellingId="@BestellingId"
                                          OnNieuweRonde="NieuweRonde"
                                          OnHerhaalRonde="HerhaalLaatsteRonde"
                                          OnBetaalAlles="BetaalAlles" />
                                </div>


                            </div>
                        }
                    </div>
                    
                 
                </div>
                
            </div>
        }
    </div>
}

else
{
    <p>Geen bestellingen gevonden.</p>
}

@code {
    [Parameter] public int TafelId { get; set; }
    [Parameter] public int BestellingId { get; set; }


    private List<Bestelling> Bestellingen = new();
    private List<Ronde> Rondes = new();

    protected override void OnParametersSet()
    {
        Bestellingen = BestellingRepo.GetByTafelId(TafelId);
        Rondes = RondeRepo.GetAll();
    }

    private async Task NieuweRonde()
    {
        // Logica voor nieuwe ronde starten
    }

    private async Task HerhaalLaatsteRonde()
    {
        // Kopieer laatste ronde naar nieuwe
    }

    private async Task BetaalAlles()
    {
        // Zet status van alle producten op betaald
    }

}
